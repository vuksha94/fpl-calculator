{"version":3,"sources":["serviceWorker.ts","api/api.ts","FPLCalculator/Select.tsx","FPLCalculator/PlayerInfoModal.tsx","FPLCalculator/Loader.tsx","FPLCalculator/FPLCalculator.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","api","path","method","body","Promise","resolve","axios","url","data","JSON","stringify","then","res","apiResponse","status","responseHandler","catch","err","Select","props","className","description","onChange","e","onSelectChange","target","value","defaultText","options","map","option","text","PlayerInfoModal","id","role","player","first_name","second_name","goals_scored","assists","minutes","percentageXI","type","data-dismiss","Loader","Manager","entry","this","FPLCalculator","playerRowClicked","setPlayerInfoClickedInState","$","modal","printPlayerXIRow","p","idx","arr","onClick","web_name","countXI","printPlayerCaptainRow","percentageCaptain","countCaptain","selectValueChanged","numberOfManagers","setNumberOfManagersInState","Number","leagueCodeChanged","leagueCode","setLeagueCodeInState","state","allPlayersInfo","managers","playersXICountMap","Map","playersSubCountMap","playersCaptainCountMap","playersXIPercentageArray","playersSubPercentageArray","playersCaptainPercentageArray","loading","serverError","loadingFullness","setState","Object","assign","playersCountMap","playersPercentageArray","resetData","console","log","setLoadingState","getAllPlayersAndGWInfo","setAllPlayersInfoInState","players","setCurrentGWInState","currentGW","getListOfManagers","setManagersInState","getListOfPlayers","playersCountsInfo","setPlayersCountsInfoInMaps","calculatePercentage","forEach","cnt","percentage","length","toFixed","find","sortedXI","sort","a","b","setPlayersXISorted","setPlayersXIPercentageArray","sortedCaptains","setPlayersCaptainPercentageArray","elements","events","is_current","setServerError","playersXIIds","playersSUBIds","playersCaptainsIds","requests","push","promises","i","all","allResponses","picks","pick","element","is_captain","pages","Math","ceil","lastManagerOnPage","leagueId","pageNumber","standings","results","has_next","playersXISorted","arrayOfIds","has","get","set","makeMap","setPlayersXICountMap","setPlayersSubCountMap","setPlayersCaptainCountMap","playerInfoClicked","alert","sortedReverse","colSpan","toggleSortStartXI","scope","totalNumberOfManagers","required","disabled","getData","printServerErrorMsg","printPlayersPercentage","printLoadingBar","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e216210b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios, { AxiosResponse } from \"axios\";\r\nimport { ApiResponse } from \"../types/ApiResponse\";\r\n\r\n\r\nexport default function api(path: string, method: \"get\" | \"post\", body?: any) {\r\n  return new Promise<ApiResponse>((resolve) => {\r\n    axios({\r\n      method: method,\r\n      url: path,\r\n      //baseURL: ApiConfig.API_URL,\r\n      data: JSON.stringify(body),\r\n\r\n    })\r\n      .then((res) => responseHandler(res, resolve))\r\n      .catch((err) => {\r\n\r\n        const apiResponse: ApiResponse = {\r\n          status: \"error\",\r\n          data: {}\r\n        };\r\n        resolve(apiResponse);\r\n      });\r\n  });\r\n}\r\n\r\nfunction responseHandler(\r\n  res: AxiosResponse<any>,\r\n  resolve: (value?: ApiResponse) => void\r\n): void {\r\n\r\n  const apiResponse: ApiResponse = {\r\n    status: \"success\",\r\n    data: res.data\r\n  };\r\n  return resolve(apiResponse);\r\n}\r\n","import React from 'react';\r\nimport { Option } from './FPLCalculator';\r\n\r\ninterface PropsType {\r\n    options: Option[];\r\n    defaultText: string;\r\n    value: number;\r\n    onSelectChange: (value: string) => void;\r\n    description: string;\r\n}\r\nexport function Select(props: PropsType) {\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label>{props.description}:</label>\r\n            <select className=\"form-control\"\r\n                onChange={(e) => props.onSelectChange(e.target.value)}\r\n                value={props.value}>\r\n                <option value=\"\">{props.defaultText}</option>\r\n                {props.options.map(option => <option key={option.value} value={option.value}>{option.text}</option>)}\r\n            </select>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Player } from './FPLCalculator';\r\n\r\ninterface PropsType {\r\n    player: Player | undefined;\r\n\r\n}\r\n\r\nexport function PlayerInfoModal(props: PropsType) {\r\n\r\n    return (\r\n        <div id=\"playerInfoModal\" className=\"modal fade\" role=\"dialog\">\r\n            <div className=\"modal-dialog\">\r\n\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-body\">\r\n                        <table className=\"table table-bordered\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Name</th>\r\n                                    <th>Goals</th>\r\n                                    <th>Assists</th>\r\n                                    <th>Minutes</th>\r\n                                    <th>Percentage</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <th>{props.player?.first_name + ' ' + props.player?.second_name}</th>\r\n                                    <th>{props.player?.goals_scored}</th>\r\n                                    <th>{props.player?.assists}</th>\r\n                                    <th>{props.player?.minutes}</th>\r\n                                    <th>{props.player?.percentageXI}%</th>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport function Loader() {\r\n    return (\r\n        <div className=\"loader\"></div>\r\n    )\r\n}","import React from 'react';\r\nimport api from '../api/api';\r\nimport { Select } from './Select';\r\n\r\nimport $ from 'jquery';\r\nimport { PlayerInfoModal } from './PlayerInfoModal';\r\nimport { Loader } from './Loader';\r\n\r\nexport interface PlayersAndGWInfo {\r\n    players: Player[];\r\n    currentGW: number;\r\n}\r\nexport interface Option {\r\n    value: number;\r\n    text: string;\r\n}\r\nexport interface Player {\r\n    id: number;\r\n    first_name: string;\r\n    second_name: string;\r\n    web_name: string\r\n    goals_scored: number;\r\n    assists: number;\r\n    minutes: number;\r\n    team_code: number;\r\n\r\n    countXI?: number;\r\n    countSub?: number;\r\n    countCaptain?: number;\r\n    percentageXI?: number;\r\n    percentageSub?: number;\r\n    percentageCaptain?: number;\r\n}\r\n\r\nexport class Manager {\r\n    entry: number\r\n    constructor(entry: number) {\r\n        this.entry = entry;\r\n    }\r\n}\r\n\r\nexport interface PlayersCountsInfo {\r\n    playersXIIds?: number[];\r\n    playersSUBIds?: number[];\r\n    playersCaptainsIds?: number[];\r\n}\r\n\r\ninterface StateType {\r\n    allPlayersInfo: Player[];\r\n    managers: Manager[];\r\n\r\n    playersXICountMap: Map<number, number>;\r\n    playersSubCountMap: Map<number, number>;\r\n    playersCaptainCountMap: Map<number, number>;\r\n\r\n    playersXIPercentageArray: Player[];\r\n    playersSubPercentageArray: Player[];\r\n    playersCaptainPercentageArray: Player[];\r\n\r\n    loading: boolean;\r\n    serverError: boolean;\r\n    numberOfManagers: number;\r\n    leagueCode: number;\r\n    currentGW?: number;\r\n    loadingFullness: number;\r\n    playerInfoClicked?: Player;\r\n    playersXISorted?: 'desc' | 'asc';\r\n}\r\n\r\n\r\n\r\nexport class FPLCalculator extends React.Component<Readonly<{}>, StateType> {\r\n    constructor(props: Readonly<{}>) {\r\n        super(props);\r\n        this.state = {\r\n            allPlayersInfo: [],\r\n            managers: [],\r\n            playersXICountMap: new Map<number, number>(),\r\n            playersSubCountMap: new Map<number, number>(),\r\n            playersCaptainCountMap: new Map<number, number>(),\r\n            playersXIPercentageArray: [],\r\n            playersSubPercentageArray: [],\r\n            playersCaptainPercentageArray: [],\r\n            loading: false,\r\n            serverError: false,\r\n            numberOfManagers: 100,\r\n            leagueCode: 64284,\r\n            loadingFullness: 0\r\n        };\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        // this.getData();\r\n    }\r\n    /*componentDidUpdate(prevProps: Readonly<{}>, prevState: StateType) {\r\n\r\n    }*/\r\n\r\n    private resetData() {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            managers: [],\r\n            playersCountMap: new Map<number, number>(),\r\n            playersPercentageArray: [],\r\n            serverError: false,\r\n            loadingFullness: 0\r\n        }));\r\n    }\r\n    private getData() {\r\n        this.resetData();\r\n        console.log('getData()')\r\n        this.setLoadingState(true);\r\n\r\n        this.getAllPlayersAndGWInfo()\r\n            .then(data => {\r\n                console.log('getAllPlayersAndGWInfo response')\r\n                this.setAllPlayersInfoInState(data!.players);\r\n                this.setCurrentGWInState(data!.currentGW);\r\n            });\r\n\r\n        this.getListOfManagers()\r\n            .then(managers => {\r\n                this.setManagersInState(managers);\r\n                console.log(managers);\r\n                return this.getListOfPlayers(managers)\r\n            })\r\n            .then(playersCountsInfo => {\r\n                this.setPlayersCountsInfoInMaps(playersCountsInfo);\r\n                console.log(this.state.playersXICountMap);\r\n                console.log(this.state.playersSubCountMap);\r\n                console.log(this.state.playersCaptainCountMap);\r\n                this.calculatePercentage();\r\n                this.setLoadingState(false);\r\n            })\r\n        console.log('getData() end')\r\n    }\r\n\r\n    private calculatePercentage() {\r\n        let playersXIPercentageArray: Player[] = [];\r\n        let playersCaptainPercentageArray: Player[] = [];\r\n        this.state.playersXICountMap.forEach((cnt, id) => {\r\n            const numOfManagers = this.state.managers.length;\r\n            let percentage = (cnt / numOfManagers) * 100;\r\n            // percentage = Math.floor(percentage * 100) / 100; // na dve decimale\r\n            percentage = Number(percentage.toFixed(2)); // na dve decimale\r\n            const player = this.state.allPlayersInfo.find(p => p.id === id);\r\n            player!.percentageXI = percentage;\r\n            player!.countXI = cnt;\r\n            playersXIPercentageArray = [...playersXIPercentageArray, player!];\r\n        });\r\n        const sortedXI = playersXIPercentageArray.sort((a, b) => b.percentageXI! - a.percentageXI!);\r\n        this.setPlayersXISorted('desc');\r\n        this.setPlayersXIPercentageArray(sortedXI);\r\n\r\n        this.state.playersCaptainCountMap.forEach((cnt, id) => {\r\n            const numOfManagers = this.state.managers.length;\r\n            let percentage = (cnt / numOfManagers) * 100;\r\n            // percentage = Math.floor(percentage * 100) / 100; // na dve decimale\r\n            percentage = Number(percentage.toFixed(2)); // na dve decimale\r\n            const player = this.state.allPlayersInfo.find(p => p.id === id);\r\n            player!.percentageCaptain = percentage;\r\n            player!.countCaptain = cnt;\r\n            playersCaptainPercentageArray = [...playersCaptainPercentageArray, player!];\r\n        });\r\n        const sortedCaptains = playersCaptainPercentageArray.sort((a, b) => b.percentageCaptain! - a.percentageCaptain!);\r\n        this.setPlayersCaptainPercentageArray(sortedCaptains);\r\n    }\r\n\r\n\r\n\r\n    private getAllPlayersAndGWInfo(): Promise<PlayersAndGWInfo | undefined> {\r\n        return new Promise<PlayersAndGWInfo>(resolve => {\r\n            api('bootstrap-static/', 'get')\r\n                .then(res => {\r\n                    if (res.status === 'success') {\r\n                        const players = res.data.elements;\r\n                        const currentGW = res.data.events.find((e: any) => e.is_current).id;\r\n                        return resolve({\r\n                            players,\r\n                            currentGW\r\n                        });\r\n                    } else {\r\n                        this.setServerError(true);\r\n                    }\r\n                })\r\n        });\r\n\r\n    }\r\n    private async getListOfPlayers(managers: Manager[] | undefined): Promise<PlayersCountsInfo> {\r\n        const currentGW = this.state.currentGW;\r\n        //let playersCountsInfo: PlayersCountsInfo = {};\r\n        let playersXIIds: number[] = [];\r\n        let playersSUBIds: number[] = [];\r\n        let playersCaptainsIds: number[] = [];\r\n        console.log('managers start');\r\n        return new Promise<PlayersCountsInfo>(resolve => {\r\n\r\n            let requests: string[] = [];\r\n            for (let idx in managers!) {\r\n                const url = `/entry/${managers[idx].entry}/event/${currentGW}/picks/`;\r\n                requests.push(url);\r\n            }\r\n\r\n            let promises = [];\r\n            for (let i = 0; i < requests.length; ++i) {\r\n                promises.push(api(requests[i], 'get'));\r\n            }\r\n\r\n            // when all promises are resolved resolve -> all manager's players for given gw are loaded\r\n            Promise.all(promises)\r\n                .then(allResponses => {\r\n                    for (const res of allResponses) {\r\n                        if (res.status === 'success') {\r\n                            const picks = res.data.picks;\r\n                            for (const idx in picks) {\r\n                                const pick = picks[idx];\r\n                                if (Number(idx) < 11) {\r\n                                    playersXIIds = [...playersXIIds, pick.element];\r\n                                } else {\r\n                                    playersSUBIds = [...playersSUBIds, pick.element];\r\n                                }\r\n                                if (pick.is_captain) {\r\n                                    playersCaptainsIds = [...playersCaptainsIds, pick.element];\r\n                                }\r\n                            }\r\n                        } else {\r\n                            this.setServerError(true);\r\n                        }\r\n                    }\r\n                    resolve({\r\n                        playersXIIds,\r\n                        playersSUBIds,\r\n                        playersCaptainsIds\r\n                    });\r\n                });\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private async getListOfManagers(): Promise<Manager[] | undefined> {\r\n        const pages = Math.ceil(this.state.numberOfManagers / 50); // read exact num of pages\r\n        const lastManagerOnPage = this.state.numberOfManagers % 50;\r\n        const leagueId = this.state.leagueCode; // overall league id\r\n        let managers: Manager[] = [];\r\n        for (let pageNumber = 1; pageNumber <= pages; ++pageNumber) {\r\n            const url = `leagues-classic/${leagueId}/standings/?page_standings=${pageNumber}`;\r\n            const res = await api(url, 'get');\r\n            if (res.status === 'success') {\r\n                console.log(res.data)\r\n                const standings = res.data.standings.results;\r\n                for (let i = 1; i <= standings.length; i++) {\r\n                    if (pages === pageNumber && lastManagerOnPage !== 0 && lastManagerOnPage === i - 1) break; // last page and last manager done -> exit the loop\r\n                    const entry = standings[i - 1].entry\r\n                    managers = [...managers, new Manager(entry)]\r\n                }\r\n                if (!res.data.standings.has_next) break;\r\n            } else {\r\n                return Promise.resolve([]);\r\n            }\r\n        }\r\n        return Promise.resolve(managers);\r\n    }\r\n\r\n\r\n\r\n    private setPlayersXISorted(playersXISorted: 'desc' | 'asc') {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            playersXISorted\r\n        }));\r\n    }\r\n    private setPlayersXIPercentageArray(playersXIPercentageArray: Player[]) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            playersXIPercentageArray\r\n        }));\r\n    }\r\n    private setPlayersCaptainPercentageArray(playersCaptainPercentageArray: Player[]) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            playersCaptainPercentageArray\r\n        }));\r\n    }\r\n\r\n    private makeMap(arrayOfIds: number[]) {\r\n        const map = new Map<number, number>();\r\n        for (const id of arrayOfIds) {\r\n            if (map.has(id)) {\r\n                const cnt = map.get(id);\r\n                map.set(id, cnt! + 1);\r\n            } else {\r\n                map.set(id, 1);\r\n            }\r\n        }\r\n        return map;\r\n    }\r\n\r\n    private setPlayersCountsInfoInMaps(playersCountsInfo: PlayersCountsInfo | undefined) {\r\n\r\n        const playersXICountMap = this.makeMap(playersCountsInfo?.playersXIIds!);\r\n        const playersSubCountMap = this.makeMap(playersCountsInfo?.playersSUBIds!);\r\n        const playersCaptainCountMap = this.makeMap(playersCountsInfo?.playersCaptainsIds!);\r\n\r\n        this.setPlayersXICountMap(playersXICountMap);\r\n        this.setPlayersSubCountMap(playersSubCountMap);\r\n        this.setPlayersCaptainCountMap(playersCaptainCountMap);\r\n\r\n    }\r\n\r\n    private setPlayersXICountMap(playersXICountMap: Map<number, number>) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            playersXICountMap\r\n        }));\r\n    }\r\n    private setPlayersSubCountMap(playersSubCountMap: Map<number, number>) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            playersSubCountMap\r\n        }));\r\n    }\r\n    private setPlayersCaptainCountMap(playersCaptainCountMap: Map<number, number>) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            playersCaptainCountMap\r\n        }));\r\n    }\r\n\r\n    private setLoadingState(loading: boolean) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            loading\r\n        }));\r\n    }\r\n    private setServerError(serverError: boolean) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            serverError\r\n        }));\r\n    }\r\n\r\n    private setAllPlayersInfoInState(allPlayersInfo: Player[] | undefined) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            allPlayersInfo\r\n        }));\r\n    }\r\n\r\n    private setManagersInState(managers: Manager[] | undefined) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            managers\r\n        }));\r\n    }\r\n\r\n    private setNumberOfManagersInState(numberOfManagers: number) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            numberOfManagers\r\n        }));\r\n    }\r\n\r\n    private setLeagueCodeInState(leagueCode: number) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            leagueCode\r\n        }));\r\n    }\r\n\r\n    private setCurrentGWInState(currentGW: number) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            currentGW\r\n        }));\r\n    }\r\n\r\n    private setLoadingFullnessInState(loadingFullness: number) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            loadingFullness\r\n        }));\r\n    }\r\n    private setPlayerInfoClickedInState(playerInfoClicked: Player) {\r\n        this.setState(state => Object.assign({ ...state }, {\r\n            playerInfoClicked\r\n        }));\r\n    }\r\n\r\n    private playerRowClicked = (player: Player) => {\r\n        this.setPlayerInfoClickedInState(player);\r\n        ($('#playerInfoModal') as any).modal('show');\r\n    }\r\n\r\n\r\n    private printPlayerXIRow = (p: Player, idx: number, arr: Player[]) => {\r\n        return (\r\n            <tr key={p.id} onClick={() => this.playerRowClicked(p)}>\r\n                <td>{idx + 1}.</td>\r\n                <td>{p.web_name}</td>\r\n                <td>{p.percentageXI}%</td>\r\n                <td>{p.countXI}</td>\r\n            </tr>\r\n        );\r\n    }\r\n    private printPlayerCaptainRow = (p: Player, idx: number, arr: Player[]) => {\r\n        return (\r\n            <tr key={p.id} onClick={() => this.playerRowClicked(p)}>\r\n                <td>{idx + 1}.</td>\r\n                <td>{p.web_name}</td>\r\n                <td>{p.percentageCaptain}%</td>\r\n                <td>{p.countCaptain}</td>\r\n            </tr>\r\n        );\r\n    }\r\n    private printServerErrorMsg() {\r\n        alert('Server error occured. Data may be invalid.');\r\n        this.setServerError(false);\r\n    }\r\n\r\n    private toggleSortStartXI() {\r\n        let sortedReverse = [];\r\n        if (this.state.playersXISorted === 'desc') {\r\n            sortedReverse = this.state.playersXIPercentageArray.sort((a: Player, b: Player) => {\r\n                return a.percentageXI! - b.percentageXI!;\r\n            });\r\n            this.setPlayersXISorted('asc');\r\n        } else {\r\n            sortedReverse = this.state.playersXIPercentageArray.sort((a: Player, b: Player) => {\r\n                return b.percentageXI! - a.percentageXI!;\r\n            })\r\n            this.setPlayersXISorted('desc');\r\n        }\r\n\r\n        this.setPlayersXIPercentageArray(sortedReverse);\r\n    }\r\n\r\n    private printPlayersPercentage() {\r\n        if (this.state.playersXIPercentageArray.length) {\r\n            return (\r\n                <>\r\n\r\n                    <div className=\"col-sm-6\">\r\n                        <table className=\"table table-bordered\">\r\n                            <thead>\r\n                                <tr><th colSpan={4}>Starting XI</th></tr>\r\n                                <tr>\r\n                                    <th className=\"cursor-pointer\" onClick={() => this.toggleSortStartXI()} scope=\"col\">#</th>\r\n                                    <th scope=\"col\">Player</th>\r\n                                    <th scope=\"col\">Percentage</th>\r\n                                    <th scope=\"col\">Count</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.playersXIPercentageArray.map(this.printPlayerXIRow)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <div className=\"col-sm-6\">\r\n                        <table className=\"table table-bordered\">\r\n                            <thead>\r\n                                <tr><th colSpan={4}>Captains</th></tr>\r\n                                <tr>\r\n                                    <th scope=\"col\">#</th>\r\n                                    <th scope=\"col\">Player</th>\r\n                                    <th scope=\"col\">Percentage</th>\r\n                                    <th scope=\"col\">CNT</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.playersCaptainPercentageArray.map(this.printPlayerCaptainRow)}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n    }\r\n\r\n    private printLoadingBar() {\r\n        //return <LoadIndicator fullness={this.state.loadingFullness} />;\r\n        return (\r\n            <div className=\"col-sm-12 loader-col\">\r\n                <Loader />\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    private selectValueChanged = (numberOfManagers: string) => {\r\n        this.setNumberOfManagersInState(Number(numberOfManagers));\r\n    }\r\n\r\n    private leagueCodeChanged = (leagueCode: string) => {\r\n        this.setLeagueCodeInState(Number(leagueCode));\r\n    }\r\n\r\n    render() {\r\n        const fromOptions: Option[] = [\r\n            { value: 5, text: \"TOP 5\" },\r\n            { value: 10, text: \"TOP 10\" },\r\n            { value: 100, text: \"TOP 100\" },\r\n            /*{ value: 500, text: \"TOP 500\" },\r\n            { value: 1000, text: \"TOP 1000\" },\r\n            { value: 10000, text: \"TOP 10K\" },*/\r\n        ];\r\n        const totalNumberOfManagers = this.state.managers.length;\r\n\r\n        return (\r\n            <div className=\"container-fluid\">\r\n                <div className=\"row\">\r\n                    <Select onSelectChange={this.selectValueChanged}\r\n                        defaultText=\"Select\" options={fromOptions}\r\n                        value={this.state.numberOfManagers}\r\n                        description=\"Sample\" />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"form-group\">\r\n                        <label>League code:</label>\r\n\r\n                        <input className=\"form-control\" type=\"number\"\r\n                            value={this.state.leagueCode}\r\n                            onChange={(e) => this.leagueCodeChanged(e.target.value)}\r\n                            required />\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <button className=\"btn btn-info\" disabled={this.state.loading} onClick={() => this.getData()}>Calculate percentage</button>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-12\">\r\n                        {!this.state.loading && totalNumberOfManagers > 0 &&\r\n                            <span className=\"text-bold \">\r\n                                Total number of managers:{totalNumberOfManagers}\r\n                            </span>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    {this.state.serverError && this.printServerErrorMsg()}\r\n                    {!this.state.loading && this.printPlayersPercentage()}\r\n                    {this.state.loading && this.printLoadingBar()}\r\n                </div>\r\n\r\n                <PlayerInfoModal player={this.state.playerInfoClicked} />\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport \"bootstrap/dist/js/bootstrap\";\r\nimport 'jquery/dist/jquery.js';\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { FPLCalculator } from \"./FPLCalculator/FPLCalculator\";\r\n\r\n\r\n//ReactDOM.render(<Calculator />, document.getElementById(\"root\"));\r\n//ReactDOM.render(<FilterableProductTable />, document.getElementById(\"root\"));\r\n//ReactDOM.render(<ClickCounter />, document.getElementById(\"root\"));\r\n//ReactDOM.render(<MathCalculator />, document.getElementById(\"root\"));\r\n//ReactDOM.render(<FPLSearch />, document.getElementById(\"root\"));\r\nReactDOM.render(<FPLCalculator />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}